---
title: "Likelihood of opening door in different conditions"
author: "Liza Moscovice, Anja Eggert, Christian Manteuffel and Jean-Loup Rault"
date: "`r Sys.Date()`" 
editor: visual
code-fold: false
toc: true
format: html
self-contained: true
---

# Libraries

```{r, libraries, warning=FALSE, message=FALSE, echo=TRUE}
library(tidyverse)     # tidy universe
library(lmerTest)      # mixed model lme4 with p-values
library(emmeans)       # emmeans
```

```{r, my_theme, echo = FALSE}
my_theme = theme_classic() +
  theme(axis.title = element_text(face = "bold", size = 14),
        axis.text  = element_text(size = 12, angle = 0, vjust = 0.5),
        plot.title = element_text(face = "bold", size = 14),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

```{r, seed}
set.seed(1989)
```

# Data

## Read data

```{r, data, warning = FALSE}
dat <- read_csv("../data/Fig-S5-likelihood-condition.csv")
```

## Adjust data types

```{r, data-adj}
dat <- dat %>% 
  mutate_at(vars(test.day,
                 daily.test.order.within.group), ~as.factor(.))
```

## Data summary

```{r, data-sum}
dat %>% 
  # calculate probability per pig (75 pigs in total)
  group_by(id.group, condition, compartment) %>% 
  summarize(prob.helped = sum(opened.comp)/n(),
            nr.helped   = sum(opened.comp),
            n_trials    = n()) %>% 
  ungroup() %>% 
  group_by(condition, compartment)%>%
  rstatix::get_summary_stats(c(prob.helped), 
                             show = c("mean", "sd", 
                                      "min", "max", 
                                      "median", "iqr")) %>% 
  ungroup()
```

# Binomial mixed model

## Run full model

```{r, mod-cont}
contr = glmerControl(optimizer   = "bobyqa", 
                     optCtrl     = list(maxfun=100000), 
                     calc.derivs = FALSE)
```

```{r, mod}
mod <- glmer(opened.comp ~
               # test predictors
               condition * compartment +
               # control predictor
               location + 
               test.day + 
               daily.test.order.within.group +
              # random/nested factor
              (1|id.group),
            # data set
            data = dat,
            family = binomial,
            # numerical optimizer
            control = contr)
```

## Run reduced model

```{r, mod-red}
mod.red <- glmer(opened.comp ~
               # no test predictors
               # control predictor
               location + 
               test.day + 
               daily.test.order.within.group +
              # random/nested factor
              (1|id.group),
            # data set
            data = dat,
            family = binomial,
            # numerical optimizer
            control = contr)
```

## Model comparison

```{r, mod-anova}
anova(mod.red, 
      mod, 
      test = "Chisq")
```

## Summary of model

```{r, mod-sum-1}
summary(mod)
```

```{r, mod-sum-2}
round(drop1(mod,test = 'Chisq'),3)
as.data.frame(round(confint(object = mod, method= "Wald"),3)) 
```

## Performance of model

```{r, mod-perf}
performance::check_collinearity(mod)

performance::check_overdispersion(mod)
```

# Estimated marginal means

## All comparisons

```{r, mod-emm}
emm <- emmeans(mod, 
               specs  = pairwise ~ compartment * condition,
               type   = "response",
               adjust = "tukey")

emm
```

# Plot

## Calculate probability within each group

```{r, dat-plot}
dat.plot <- dat %>% 
  select(trapped.pig.unique.id,
         id.group,
         condition, compartment,
         opened.comp) %>% 
  # calculate probability per pig (75 pigs in total)
  group_by(id.group, condition, compartment) %>% 
  summarize(prob.helped = sum(opened.comp)/n(),
            nr.helped   = sum(opened.comp),
            n_trials    = n()) %>% 
  ungroup() 
```

## Compact letter display

```{r, mod-cld}
cld <- multcomp::cld(emm$emmeans, Letters = letters)
cld$.group <- str_replace_all(cld$.group, fixed(" "), "")

cld <- as_tibble(cld) %>% 
  arrange(condition, compartment)

cld
```

## Plot with emmeans

```{r, plot-1}
# prepare x-position of emmeans
cld$xpos   <- c(0.7, 1.3, 1.7, 2.3)
cld$xpos.l <- c(0.55, 1.4, 1.55, 2.4)

plot <- dat.plot %>%
  ggplot() +
  geom_boxplot(aes(x   = condition, 
                   y   = prob.helped,
                   col = compartment),
               outlier.shape = NA, width = 0.5, show.legend = FALSE) +
  geom_jitter(aes(x   = condition, 
                  y   = prob.helped, 
                  col = compartment,
                  shape = compartment),
              position = position_jitterdodge(jitter.width  = 0.15,
                                              dodge.width   = 0.5),
              size = 3, alpha = 0.7) +
  scale_colour_manual(labels = c("Empty compartment",
                                 "Test compartment"),
                      values = c("grey50", "orchid")) +
  scale_shape_manual(labels = c("Empty compartment",
                                 "Test compartment"),
                     values = c(17, 19)) +
  scale_y_continuous(lim = c(0, 1.02), breaks = seq(0, 1, 0.2)) +
  scale_x_discrete(labels= c("Separation", "Test")) +
  geom_errorbar(data = cld,
                aes(x = xpos,
                    ymin = prob-SE, ymax = prob+SE),
                col = "black", width = 0.08) +
  geom_point(data = cld,
             aes(x = xpos, y = prob),
             size = 3, color = "black") +
  geom_text(data = cld,
            aes(y = prob, x = xpos.l, label = .group, hjust = 0),
            col = "black") +
  labs(x = "Condition",
       y = "Likelihood of opening a door") +
  my_theme +
  theme(legend.justification = c(0.1, 0.9),
        legend.position      = c(0.1, 0.9),
        legend.background = element_rect(fill     = NA,
                                         colour   = "black",
                                         size     = 0.3,
                                         linetype = "solid"),
        legend.title = element_blank(),
        legend.text = element_text(size = 12)) +
  guides(shape = guide_legend(override.aes = list(alpha = 1,
                                                  size  = 4)))
```

```{r, plot-2, fig.height=10, fig.width=10, warning=FALSE}
plot
```

# How to cite R

"All analyses were performed using R Statistical Software (version 4.2.0; R Core Team 2022)".

Reference: R Core Team (2022). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/.

```{r, cite-r}
citation()
version$version.string
```

```{r, cite-packages}
citation("tidyverse")
citation("lmerTest")
citation("emmeans")
```

# Session Info

```{r, session}
sessionInfo()
```
